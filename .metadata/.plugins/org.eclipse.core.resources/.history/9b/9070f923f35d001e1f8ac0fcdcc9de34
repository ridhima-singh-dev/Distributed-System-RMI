package broker;

import static org.junit.Assert.*;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

import org.junit.BeforeClass;
import org.junit.Test;

import service.auldfellas.AFQService;
import service.broker.LocalBrokerService;
import service.core.BrokerService;
import service.core.ClientInfo;
import service.core.Constants;
import service.core.Quotation;
import service.core.QuotationService;

public class BrokerUnitTest {

	private static Registry registry;
	private static LocalBrokerService localBrokerService;
	private static BrokerService brokerService;

	@BeforeClass
	public static void setup() {
		localBrokerService = new LocalBrokerService();
		try {
			registry = LocateRegistry.createRegistry(1099);
			brokerService = (BrokerService) UnicastRemoteObject.exportObject(localBrokerService, 0);
			registry.bind(Constants.BROKER_SERVICE, brokerService);
		} catch (Exception e) {
			System.out.println("Trouble: " + e);
			e.printStackTrace();
		}
	}

	@Test
	public void connectionTest() throws Exception {
		BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);
		assertNotNull(service);
	}

	@Test
	public void testGenerateListOfQuotation() throws Exception {
	    BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);
	    
	    // Check if the result is an instance of List
	    assertTrue(service.getQuotations(new ClientInfo("Donald Trump", ClientInfo.MALE, 44, 5, 3, "COL123/3")) instanceof List);
	    
	    // Check if the list is empty
	    assertTrue(service.getQuotations(new ClientInfo("Joe Biden", ClientInfo.MALE, 44, 5, 3, "COL123/3")).isEmpty());
	}


}
