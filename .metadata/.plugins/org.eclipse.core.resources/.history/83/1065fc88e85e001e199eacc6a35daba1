package broker;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;
import java.util.stream.Stream;

import org.junit.BeforeClass;
import org.junit.Test;

import service.broker.LocalBrokerService;
import service.core.BrokerService;
import service.core.ClientInfo;
import service.core.Constants;
import service.core.Quotation;

public class BrokerUnitTest {
	private static Registry registry;
	private static LocalBrokerService localBrokerService;
	private static BrokerService brokerService;
	private final boolean expectedResult;

	@BeforeClass
	public static void setup() {
		localBrokerService = new LocalBrokerService();
		try {
			registry = LocateRegistry.createRegistry(1099);
			// To Register a registry
			LocalBrokerService.registry = registry;
			brokerService = (BrokerService) UnicastRemoteObject.exportObject(localBrokerService, 0);
			registry.bind(Constants.BROKER_SERVICE, brokerService);
		} catch (Exception e) {
			System.out.println("Trouble: " + e);
			e.printStackTrace();
		}
	}

	@Test
	public void connectionTest() throws Exception {
		BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);
		assertNotNull(service);
	}

	@Test
    public void testGenerateListOfQuotation() throws Exception {
        BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);

        List<Quotation> quotations = service.getQuotations(clientInfo);

        assertEquals(expectedResult, quotations instanceof List<?>);
        assertEquals(expectedResult, quotations.isEmpty());
    }

    private static Stream<Arguments> quotationTestData() {
        // Define your test cases here
        return Stream.of(
            Arguments.of(new ClientInfo("Donald Duck", ClientInfo.MALE, 35, 0.45, 1.6, false, false), true),
            Arguments.of(new ClientInfo("Joe Biden", ClientInfo.MALE, 44, 6.0, 75.0, false, false), true),
            // Add more test cases as needed
        );
    }
	
}
