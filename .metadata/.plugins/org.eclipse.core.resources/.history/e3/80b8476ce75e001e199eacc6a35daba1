package broker;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.List;

import org.junit.BeforeClass;
import org.junit.Test;

import service.broker.LocalBrokerService;
import service.core.BrokerService;
import service.core.ClientInfo;
import service.core.Constants;

public class BrokerUnitTest {
	private static Registry registry;
	private static LocalBrokerService localBrokerService;
	private static BrokerService brokerService;

	@BeforeClass
	public static void setup() {
		localBrokerService = new LocalBrokerService();
		try {
			registry = LocateRegistry.createRegistry(1099);
			// To Register a registry
			LocalBrokerService.registry = registry;
			brokerService = (BrokerService) UnicastRemoteObject.exportObject(localBrokerService, 0);
			registry.bind(Constants.BROKER_SERVICE, brokerService);
		} catch (Exception e) {
			System.out.println("Trouble: " + e);
			e.printStackTrace();
		}
	}

	@Test
	public void connectionTest() throws Exception {
		BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);
		assertNotNull(service);
	}

	@Test
	public void testGenerateListOfQuotation() throws Exception {
	    BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);
	    
	    // Check if the result is an instance of List
	    assertTrue(service.getQuotations(new ClientInfo("Donald Duck", ClientInfo.MALE, 35, 0.45, 1.6, false, false)) instanceof List);
	    
	    // Check if the list is empty
	    assertTrue(service.getQuotations(new ClientInfo("Joe Biden", ClientInfo.MALE, 44, 6.0, 75.0, false, false)).isEmpty());
	}
	
	 @Test
	    public void testEmptyQuotationList() throws Exception {
	        // Unbind the broker service to simulate no services registered
	        registry.unbind(Constants.BROKER_SERVICE);

	        BrokerService service = (BrokerService) registry.lookup(Constants.BROKER_SERVICE);

	        // Check if the list of quotations is empty when no services are registered
	        assertTrue(service.getQuotations(new ClientInfo("No Service Client", ClientInfo.MALE, 30, 5.9, 70.0, false, false)).isEmpty());
	    }
}
